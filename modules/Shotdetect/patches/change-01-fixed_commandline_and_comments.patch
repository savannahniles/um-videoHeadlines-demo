diff -rudN original/src/commandline.cc change-01-fixed_commandline_and_comments/src/commandline.cc
--- original/src/commandline.cc	2013-08-11 22:48:42.925702316 +0200
+++ change-01-fixed_commandline_and_comments/src/commandline.cc	2013-08-12 01:14:34.849552333 +0200
@@ -17,6 +17,7 @@
 #include "src/film.h"
 #include "src/xml.h"
 
+#define APP_VERSION "SVN-r$Revision: 194 $-$Author: peterb $"
 class xml;
 class film;
 
@@ -43,18 +44,24 @@
 void
 show_help (char **argv)
 {
-  printf ("usage: %s \n"
-          "Shotdetect (IRI - johmathe - $Id: main.cpp 164 2007-10-13 23:53:21Z johmathe $)\n"
+  printf ("\nShotdetect version \"%s\" ($Date: 2010-10-01 01:35:11 +0200 (Fri, 01 Oct 2010) $), Copyright (c) 2007-2010 Johan Mathe\n\n"
+          "Usage: %s \n"
           "-h           : show this help\n"
+          "-s threshold : threshold\n"
           "-i file      : input file path\n"
           "-o path      : output path\n"
-          "-s threshold : threshold\n"
-          "-w           : generate xml of waveform\n"
+          "-y year      : set the year\n"
+          "-a id        : id of the movie\n"
+          "-x xsl path  : path of the xsl stylesheet\n"
+          "-w           : generate xml of audio\n"
           "-v           : generate xml of video infos\n"
-          "-f           : generate first img for each shot\n"
-          "-l           : generate last img for each shot\n"
-          "-m           : generate the thumb img\n"
-          "-r           : generate the real img\n", argv[0]);
+          "-f           : generate first image for each shot\n"
+          "-l           : generate last image for each shot\n"
+          "-m           : generate the thumbnail image\n"
+          "-r           : generate the images in native resolution\n",
+          APP_VERSION,
+          argv[0]
+         );
 }
 
 
@@ -62,17 +69,23 @@
 int
 main (int argc, char **argv)
 {
+  film f = film ();
+  bool gui = true;
+  bool ifile_set = false;
+  bool ofile_set = false;
+  bool id_set = false;
+  bool xsl_path_set = false;
+  string xsl_path = "Not set";
+
   extern char *optarg;
   extern int optind, opterr, optopt;
 
 
-  film f = film ();
-
   // Initialize threshold to a sensible default value
   f.threshold=60;
 
   for (;;) {
-    int c = getopt (argc, argv, "?ht:i:o:s:flwvmr");
+    int c = getopt (argc, argv, "?ht:y:i:o:a:x:s:flwvmr");
 
     if (c < 0) {
       break;
@@ -85,64 +98,98 @@
       exit (EXIT_SUCCESS);
       break;
 
-      /*	 choix des thumbs   */
+     /* Draw first image of scene cut? */
     case 'f':
       f.set_first_img(true);
       break;
 
+      /* Draw last image of scene cut? */
     case 'l':
       f.set_last_img(true);
       break;
 
-      /* generer l'image en resolution native */
+      /* Generate images with native resolution? */
     case 'r':
       f.set_shot(true);
       break;
 
-      /* generer l'image en miniature */
+      /* Generate thumbnails? */
     case 'm':
       f.set_thumb(true);
       break;
 
-      /* generer le xml pour les donnees video */
+      /* Generate XML with video metadata? */
     case 'v':
       f.set_video(true);
       break;
 
-      /* generer le xml pour les donnees audio */
+      /* Generate XML with audio metadata? */
     case 'w':
-      f.set_audio(true) ;
+      f.set_audio(true);
       break;
 
-      /*  Seuil */
+      /* Set the threshold */
     case 's':
       f.set_threshold(atoi (optarg));
       break;
 
+      /* Id for path creation */
+    case 'a':
+      f.set_alphaid (optarg);
+      id_set = true;
+      break;
+
+      /* Set the XSLT path */
+    case 'x':
+      xsl_path = optarg;
+      xsl_path_set = true;
+      break;
+
+      /* Set the title */
+    case 't':
+      f.set_title(optarg);
+      break;
+
+      /* Set the year */
+    case 'y':
+      f.set_year(atoi (optarg));
+      break;
+
+      /* Set the input file */
     case 'i':
       f.set_ipath(optarg);
+      if (!f.get_ipath().empty()) {
+        ifile_set = true;
+      } 
       break;
 
+      /* Set the output file */
     case 'o':
       f.set_opath(optarg);
+      if (!f.get_opath().empty()) {
+        ofile_set = true;
+      } 
       break;
 
+
     default:
       break;
     }
-
   }
 
-  /*  Traitement des erreurs */
-  if (f.get_ipath().empty()) {
-    cerr << "Please specify an input file" << endl;
-    show_help (argv);
-    exit(EXIT_FAILURE);
-  }
-  if (f.get_opath().empty()) {
-    cerr << "Please specify an output path" << endl;
+  // Error handling
+  if ( !ifile_set || !ofile_set || !id_set ) {
+    if (!ifile_set) {
+      cerr << "ERROR: Input filename is missing or empty. See argument '-i'" << endl;
+    }
+    if (!ofile_set) {
+      cerr << "ERROR: Output path is missing or empty. See argument '-o'" << endl;
+    }
+    if (!id_set) {
+      cerr << "ERROR: please specify an alphanumeric id. See argument '-a'" << endl;
+    }
     show_help (argv);
-    exit(EXIT_FAILURE);
+    exit (EXIT_FAILURE);
   }
 
   xml *x = new xml (&f);
diff -rudN original/src/graph.cc change-01-fixed_commandline_and_comments/src/graph.cc
--- original/src/graph.cc	2013-08-11 22:48:42.925702316 +0200
+++ change-01-fixed_commandline_and_comments/src/graph.cc	2013-08-12 00:30:10.385597993 +0200
@@ -107,7 +107,6 @@
    */
   background_color = gdImageColorAllocate (im_colors, 255, 255, 255);
   line_color = gdImageColorAllocate (im_colors, 0, 0, 0);
-  title_color = gdImageColorAllocate (im_colors, 255, 255, 0);
   grid_color = gdImageColorAllocate (im_colors, 0, 0, 0);
   red_color = gdImageColorAllocate (im_colors, 255, 0, 0);
   green_color = gdImageColorAllocate (im_colors, 0, 255, 0);
@@ -178,10 +177,7 @@
     if (!(i % grid_size)) {
       gdImageLine (im_hsv, i, xaxis_offset - 2, i, xaxis_offset + 2, grid_color);
     }
-
   }
-
-
 }
 
 void
diff -rudN original/src/main.cc change-01-fixed_commandline_and_comments/src/main.cc
--- original/src/main.cc	2013-08-11 22:48:42.925702316 +0200
+++ change-01-fixed_commandline_and_comments/src/main.cc	2013-08-12 00:45:32.593582189 +0200
@@ -76,6 +76,10 @@
   extern char *optarg;
   extern int optind, opterr, optopt;
 
+
+  // Initialize threshold to a sensible default value
+  f.threshold=DEFAULT_THRESHOLD;
+
   for (;;) {
     int c = getopt (argc, argv, "?hnt:y:i:o:a:x:s:flwvmr");
 
@@ -90,11 +94,12 @@
       exit (EXIT_SUCCESS);
       break;
 
-      /* Draw first and/or last image of scene cut? */
+      /* Draw first image of scene cut? */
     case 'f':
       f.set_first_img(true);
       break;
 
+      /* Draw last image of scene cut? */
     case 'l':
       f.set_last_img(true);
       break;
@@ -137,10 +142,6 @@
       xsl_path_set = true;
       break;
 
-    case 'n':
-      gui = false;
-      break;
-
       /* Set the title */
     case 't':
       f.set_title(optarg);
@@ -151,16 +152,24 @@
       f.set_year(atoi (optarg));
       break;
 
+      /* Set the input file */
     case 'i':
       f.set_ipath(optarg);
       ifile_set = true;
       break;
 
+      /* Set the output file */
     case 'o':
       f.set_opath(optarg);
       ofile_set = true;
       break;
 
+      /* Run without GUI */
+    case 'n':
+      gui = false;
+      break;
+
+
     default:
       break;
     }
@@ -171,17 +180,15 @@
     // Error handling
     if ( !ifile_set || !ofile_set || !id_set ) {
       if (!ifile_set) {
-        cerr << "please specify an input file" << endl;
-        show_help (argv);
+        cerr << "ERROR: Input filename is missing or empty. See argument '-i'" << endl;
       }
       if (!ofile_set) {
-        cerr << "please specify an output path" << endl;
-        show_help (argv);
+        cerr << "ERROR: Output path is missing or empty. See argument '-o'" << endl;
       }
       if (!id_set) {
-        cerr << "please specify an alphanumeric id" << endl;
-        show_help (argv);
+        cerr << "ERROR: please specify an alphanumeric id. See argument '-a'" << endl;
       }
+      show_help (argv);
       exit (EXIT_FAILURE);
     }
 
